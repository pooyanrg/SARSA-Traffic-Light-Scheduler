function [Q, queue] = SARSA
S = [4600 2700 1500 1700] / 3600;
flow = [0.24	0.23	0.24	0.23;
    0.31	0.30	0.31	0.30;
    0.37	0.32	0.37	0.32;
    0.38	0.33	0.38	0.33;
    0.41	0.39	0.41	0.39;
    0.38	0.39	0.46	0.39;
    0.21	0.19	0.21	0.19;
    0.29	0.30	0.29	0.30;
    0.31	0.31	0.31	0.31;
    0.33	0.31	0.33	0.31;
    0.37	0.38	0.37	0.38;
    0.42	0.42	0.42	0.38;
    0.44	0.41	0.44	0.41;
    0.45	0.41	0.45	0.41;
    0.41	0.39	0.46	0.42;
    0.41	0.39	0.41	0.39;
    0.31	0.31	0.31	0.31;
    0.12	0.14	0.16	0.14;
    0.04	0.04	0.05	0.04;
    0.02	0.03	0.02	0.03;
    0.04	0.05	0.04	0.05;
    0.11	0.11	0.19	0.11;
    0.19	0.14	0.19	0.14;
    0.21	0.19	0.21	0.19];

A = [30 32 35 37 40;
    46 49 53 57 60;
    60 65 70 75 80;
    66 71 76 81 86;
    103 109 116 123 129;
    87 93 99 105 111;
    25 27 29 31 33;
    43 46 49 52 55;
    47 51 54 57 61;
    51 54 58 62 65;
    79 84 90 96 101;
    132 140 149 158 166;
    142 150 159 168 176;
    152 162 172 182 192;
    103 109 116 123 129;
    103 109 116 123 129;
    47 51 54 57 61;
    17 19 21 23 25;
    11 12 14 16 17;
    10 12 13 14 16;
    11 13 15 17 19;
    15 17 19 21 23;
    20 21 25 29 30;
    25 27 29 31 33];
Q = zeros(24, 5);
alpha = 0.1;
gamma = 0.6;
epsilon = 0.4;
delta = [0 ; 0 ; 0 ; 0];
queue = zeros(2400000, 4);
for epoch = 1:100000
    w = rand;
    if(w > epsilon)
        t = 5 * rand + 1;
        idx1 = floor(t);
        a = A(1, idx1);
    else
        [v, idx1] = max(Q(1, :));
        a = A(1, idx1);
    end
    for iter = 1:24
        if (iter ~= 24)
            j = iter + 1;
        else
            j = 1;
        end
        w = rand;
        if(w > epsilon)
            t = 5 * rand + 1;
            idx2 = floor(t);
            o = A(j, idx2);
        else
            [v, idx2] = max(Q(1, :));
            o = A(j, idx2);
        end
        [r, q1, q2, q3, q4] = reward(iter, a, delta, S, flow);
        queue(epoch * iter, 1) = q1;
        queue(epoch * iter, 2) = q2;
        queue(epoch * iter, 3) = q3;
        queue(epoch * iter, 4) = q4;
        Q(iter, idx1) = Q(iter, idx1) + alpha * (r + gamma * Q(j, idx2) - Q(iter, idx1));
        a = o;
        idx1 = idx2;
    end
end
end